const { Telegraf, Markup } = require("telegraf")
require('dotenv').config()
const bot = new Telegraf(process.env.BOT_TOKEN)
const commands = require('./const')
bot.start((ctx) => ctx.reply(`–î–æ–±—Ä–∏–π –¥–µ–Ω—å ${ctx.message.from.first_name ?ctx.message.from.first_name : '' }. –ú–∏ –∑–∞–ø—Ä–æ—à—É—î–º–æ –í–∞—Å –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –≤ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—ñ, —è–∫–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ–∑–∞–ª–µ–∂–Ω–∞ —Å–æ—Ü—ñ–æ–ª–æ–≥—ñ—á–Ω–∞ –∫–æ–º–ø–∞–Ω—ñ—è Ipsos.
–ë—É–¥—å—Ç–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –≤—Å—ñ –í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —ñ –í–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ –∑–∞–ª–∏—à–∞—Ç—å—Å—è —Å—É—Ç–æ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏–º–∏, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –≤–∫–ª—é—á–µ–Ω—ñ —É –∑–≤—ñ—Ç —Ç—ñ–ª—å–∫–∏ –≤ –∑–≤–µ–¥–µ–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ.
–ü—Ä–æ—Å–∏–º–æ –í–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Å–Ω–æ —ñ —Ç–æ—á–Ω–æ.

–î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!`, Markup.inlineKeyboard(
    [
        [Markup.button.callback('üìä –ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è','btn_1')]
    ]
)))
bot.help((ctx) => ctx.reply(commands.commands))

bot.action('btn_1', async (ctx) => {
    try {
       await ctx.answerCbQuery()
       
       await ctx.replyWithHTML('<b>üëá –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à –≤—ñ–∫.</b>', Markup.inlineKeyboard(
        [
            [Markup.button.callback('18 - 24', 'btn_2'), Markup.button.callback('25 - 34', 'btn_3') ],
            [Markup.button.callback('35 - 44', 'btn_4'), Markup.button.callback('45 - 55', 'btn_5') ]
        ]
      )) 
       
    } catch (e) {
        console.error(e)
    }
    
})
function q2(ctx){
     ctx.replyWithHTML('<b>–£ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –í–∏ –ø—Ä–æ–∂–∏–≤–∞—î—Ç–µ?</b>', Markup.inlineKeyboard(
        [
            [Markup.button.callback('–ö–∏—ó–≤', 'btn_6'), Markup.button.callback('–õ—å–≤—ñ–≤', 'btn_7') ],
            [Markup.button.callback('–û–¥–µ—Å–∞', 'btn_8'), Markup.button.callback('–•–∞—Ä–∫—ñ–≤', 'btn_9') ]
        ]
      )) 
}

function q3(ctx){
    ctx.replyWithHTML('<b>–Ø–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ—Å–º–µ—Ç–∏—á–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å?</b>', Markup.inlineKeyboard(
        [
            [Markup.button.callback('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ –≤–æ–ª–æ—Å—Å—è–º', 'btn_10')], 
            [Markup.button.callback('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é –æ–±–ª–∏—á—á—è', 'btn_11')],
            [Markup.button.callback('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —Ç—ñ–ª–æ–º', 'btn_12')], 
            [Markup.button.callback('–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞', 'btn_13') ],
            [Markup.button.callback('–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è', 'btn_14') ]
        ]
      )) 
}

bot.action('btn_2', async (ctx) => {
    try {
         await ctx.answerCbQuery()
        await ctx.reply('18 - 24')
         q2(ctx)
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_3', async (ctx) => {
    try {
         await ctx.answerCbQuery()
        await ctx.reply('25 - 34')
         q2(ctx)
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_4', async (ctx) => {
    try {
         await ctx.answerCbQuery()
        await ctx.reply('35 - 44')
         q2(ctx)
        } catch (e) {
        console.error(e)
    }
})

bot.action('btn_5', async (ctx) => {
    try {
        await ctx.answerCbQuery()
        await ctx.reply('45 - 54')
         q2(ctx)
        } catch (e) {
        console.error(e)
    }
})


bot.action('btn_6', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–ö–∏—ó–≤')
         q3(ctx)
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_7', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–õ—å–≤—ñ–≤')
         q3(ctx)
        } catch (e) {
        console.error(e)
    }
})

bot.action('btn_8', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–û–¥–µ—Å–∞')
         q3(ctx)
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_9', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–•–∞—Ä–∫—ñ–≤')
         q3(ctx)
        } catch (e) {
        console.error(e)
    }
})

bot.action('btn_10', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ –≤–æ–ª–æ—Å—Å—è–º')
        } catch (e) {
        console.error(e)
    }
})

bot.action('btn_11', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é –æ–±–ª–∏—á—á—è')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_12', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–ó–∞—Å–æ–±–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ —Ç—ñ–ª–æ–º')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_13', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∞')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_14', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–Ø–∫—ñ –º–∞—Ä–∫–∏ –¥–ª—è –¥–æ–≥–ª—è–¥—É –∑–∞ –≤–æ–ª–æ—Å–º—è–º –í–∏ –∑–Ω–∞—î—Ç–µ?')
         
        } catch (e) {
        console.error(e)
    }
})
bot.on('text', (ctx) => ctx.replyWithHTML('–Ø–∫–∏–º–∏ –∑ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –º–∞—Ä–æ–∫ –≤–∏ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –∑–∞—Ä–∞–∑?', 
Markup.inlineKeyboard(
    [
        [Markup.button.callback('Garnier', 'btn_15'), Markup.button.callback('Syouss', 'btn_16')],
        [Markup.button.callback('Pantine', 'btn_17'),Markup.button.callback('Glisscur', 'btn_18') ],
        [Markup.button.callback('Head and shoulders', 'btn_19'), Markup.button.callback('–Ü–Ω—à–µ', 'btn_20')],
        [Markup.button.callback('–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è', 'btn_21') ]
        ]
  )) 
  )

bot.action('btn_15', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('Garnier')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_16', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('Syouss')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_17', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('Pantine')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_18', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('Glisscur')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_19', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('Head and shoulders')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_20', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–Ü–Ω—à–µ')
        } catch (e) {
        console.error(e)
    }
})
bot.action('btn_21', async (ctx) => {
    try {
         await ctx.answerCbQuery()
         await ctx.reply('–ó—Ä–æ–±—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –≤–∞—à–æ–≥–æ —à–∞–º–ø—É–Ω—é —ñ –¥–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ.')
         console.log(cxt);
        } catch (e) {
        console.error(e)
    }
})
bot.on('quit', (ctx) => ctx.reply('–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ, —è–∫–µ –ø–µ—Ä–µ–¥–∞—î –≤–∞—à–µ —Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–æ —à–∞–º–ø—É–Ω—é Garnier.'))
console.log(cxt);
bot.launch()
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))